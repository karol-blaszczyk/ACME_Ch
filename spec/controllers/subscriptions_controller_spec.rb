# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe SubscriptionsController, type: :controller do
  let(:plan) { create(:plan) }
  let(:user) { create(:user) }
  let(:subscription) { create(:subscription, plan: plan, user: user) }

  before do
    request.headers.merge! user.create_new_auth_token

    stub_request(:post, 'https://www.fakepay.io/purchase')
      .to_return(status: 200, body: { token: '111' }.to_json, headers: {})
  end
  # This should return the minimal set of attributes required to create a valid
  # Subscription. As you add validations to Subscription, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) do
    {
      'customer_attributes' => { 'first_name' => 'string',
                                 'last_name' => 'string',
                                 'adress' => 'string',
                                 'zip_code' => 'string' },
      'credit_card_attributes' => { 'card_number' => '4242424242424242',
                                    'cvv' => '123',
                                    'expiration_month' => '01',
                                    'expiration_year' => '2024',
                                    'zip_code' => '10045' },
      'plan_id' => plan.id
    }
  end

  describe 'GET #index' do
    it 'returns a success response' do
      subscription = create(:subscription)
      get :index, params: {}
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: { id: subscription.to_param }
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Subscription' do
        expect do
          post :create, params: { subscription: valid_attributes }
        end.to change(Subscription, :count).by(1)
      end

      it 'renders a JSON response with the new subscription' do
        post :create, params: { subscription: valid_attributes }
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        expect(response.location).to eq(subscription_url(Subscription.last))
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested subscription' do
      subscription
      expect do
        delete :destroy, params: { id: subscription.to_param }
      end.to change(Subscription, :count).by(-1)
    end
  end
end
